}
mu_xyzt <- 1/nrow(data_sim) * mu_xyzt_temp
mu_xxzt <- 1/nrow(data_sim) * mu_xxzt_temp
mu_yyzt <- 1/nrow(data_sim) * mu_yyzt_temp
mu_xyzz <- 1/nrow(data_sim) * mu_xyzz_temp
mu_xytt <- 1/nrow(data_sim) * mu_xytt_temp
mu_xxtt <- 1/nrow(data_sim) * mu_xxtt_temp
mu_xxzz <- 1/nrow(data_sim) * mu_xxzz_temp
mu_yytt <- 1/nrow(data_sim) * mu_yytt_temp
mu_yyzz <- 1/nrow(data_sim) * mu_yyzz_temp
vc_r[cnter_y, cnter_t]<- (mu_xyzt - 1/2*cor_data_sim[x,y]*(mu_xxzt + mu_yyzt) - 1/2*cor_data_sim[z,t]*(mu_xyzz + mu_xytt)
+ 1/4*cor_data_sim[x,y]*cor_data_sim[z,t]*(mu_xxzz+mu_xxtt+mu_yyzz+mu_yytt))/nrow(data_sim)
cnter_t <- cnter_t + 1
}
}
cnter_y <- cnter_y + 1
cnter_t <- 1
}
}
################################################################################
# Ein paar Werte werden initialisiert
# für den Gradienten der pfadestimates
gr = matrix(0 , nrow = 36 , ncol = 1)
gdr = matrix(0 , nrow = 36 , ncol = 1)
# Path estimates
Gbt = matrix(0 , nrow = 2 , ncol = 36)
Gbt2 = matrix(0 , nrow = 2 , ncol = 36)
# für die Gewichte
Gwt = matrix(0 , nrow = 9 , ncol = 36)
# für die Loadings
Glt = matrix(0 , nrow = 9 , ncol = 36)
# für die h - Methode
list_dh_all <- c(0.00001)
#Übersicht für verschiedene dh
Gbt_overview_delta_x1 <- data.frame(matrix(0, nrow = 36, ncol = 1))
colnames(Gbt_overview_delta_x1) <- list_dh_all
Gbt_overview_delta_x2 <-data.frame(matrix(0, nrow = 36, ncol = 1))
colnames(Gbt_overview_delta_x2) <- list_dh_all
# Counter, sodass jeder Korrelationskoeffizient durchgegangen wird
cnter = 1
for(dh in list_dh_all){
#print(dh)
for (i in 1:8) {
for (j in (i+1):9) {
cor_sim1 <- cor(data_sim)
cor_sim1[i,j] = cor_sim1[i,j] + dh
cor_sim1[j,i] = cor_sim1[i,j]
data_after_dh <- MASS::mvrnorm(n = 100,
mu = rep(0,9),
Sigma = cor_sim1,
empirical = TRUE
)
out1 <- csem(.data = data_after_dh,
.model = model_est,
# To reproduce the Adanco results
.PLS_weight_scheme_inner = 'factorial',
#  .resample_method = 'bootstrap',
.tolerance = 1e-06
)
# in h-Methode: f(x+h)
bt1 = out1$Estimates$Path_estimates[3,1:2]
# f(x+h) - f(x) / h
dlta_bt = (bt1 - bt)/dh
Gbt[,cnter] = dlta_bt[1]
Gbt2[,cnter] = dlta_bt[2]
lt1 = c(out1$Estimates$Loading_estimates[1,1:3],
out1$Estimates$Loading_estimates[2,4:6],
out1$Estimates$Loading_estimates[3,7:9])
dlta_lt = (lt1 - lt)/dh
Glt[,cnter] = dlta_lt
wt1 = c(out1$Estimates$Weight_estimates[1,1:3],
out1$Estimates$Weight_estimates[2,4:6],
out1$Estimates$Weight_estimates[3,7:9])
dlta_wt = (wt1 - wt)/dh
Gwt[,cnter] = dlta_wt
cnter = cnter + 1
}
}
cnter <- 1
Gbt_overview_delta_x1[, paste0(dh)]  <- Gbt[1,]
Gbt_overview_delta_x2[, paste0(dh)]  <- Gbt2[1,]
Gbt = matrix(0 , nrow = 2 , ncol = 36)
Gbt2 = matrix(0 , nrow = 2 , ncol = 36)
#Gwt_overview[, paste0(dh)]  <- Gwt[1,]
#Gwt = matrix(0 , nrow = 9 , ncol = 36)
#Glt_overview[, paste0(dh)]  <- Glt[1,]
#Glt = matrix(0 , nrow = 9 , ncol = 36)
}
Gbt_x1 <- t(as.matrix(Gbt_overview_delta_x1[,"1e-05"]))
Gbt_x2 <- t(as.matrix(Gbt_overview_delta_x2[,"1e-05"]))
dip <- diptest::dip.test(res$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
csv_write <- c("a" = sim_data$a[jj],
"c" = sim_data$c[jj],
"path_estimate_y_x1" = res$Estimates$Estimates_resample$Estimates1$Path_estimates$Original['Y ~ X1'],
"path_estimate_y_x2" = res$Estimates$Estimates_resample$Estimates1$Path_estimates$Original['Y ~ X2'],
"sd_bootstrap_y_x1" = sd(res$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']),
"Z_test_boot_y_x1" = abs(res$Estimates$Estimates_resample$Estimates1$Path_estimates$Original['Y ~ X1']/ sd(res$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])) < qnorm(0.975),
"Z_test_boot_y_x2" = abs(res$Estimates$Estimates_resample$Estimates1$Path_estimates$Original['Y ~ X2']/ sd(res$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X2'])) < qnorm(0.975),
"perc_ci_lb_boot_y_x1" = infer_res$Path_estimates$CI_percentile["95%L", "Y ~ X1"],
"perc_ci_ub_boot_y_x1" = infer_res$Path_estimates$CI_percentile["95%U", "Y ~ X1"],
"perc_ci_sgn_same_y_x1" = sign(infer_res$Path_estimates$CI_percentile["95%L", "Y ~ X1"]) == sign(infer_res$Path_estimates$CI_percentile["95%U", "Y ~ X1"]),
"sd_delta_y_x1" =  sqrt(diag( Gbt_x1 %*% vc_r %*% t(Gbt_x1))),
"Z_test_delta_y_x1" = abs(res$Estimates$Estimates_resample$Estimates1$Path_estimates$Original['Y ~ X1']/sqrt(diag( Gbt_x1 %*% vc_r %*% t(Gbt_x1) ))) < qnorm(0.975),
"sd_delta_y_x2" = sqrt(diag( Gbt_x2 %*% vc_r %*% t(Gbt_x2) )),
"Z_test_delta_y_x2" = abs(res$Estimates$Estimates_resample$Estimates1$Path_estimates$Original['Y ~ X2']/sqrt(diag( Gbt_x2 %*% vc_r %*% t(Gbt_x2) ))) < qnorm(0.975),
"Sim_run" = sim_runs,
"simulation_run" = jj,
"n" = n,
"c_estimate" = res$Estimates$Construct_VCV["X1", "X2"],
"dip_test_p_value" = dip$p.value
)
#write.csv(x = csv_write, file = paste0("./Data/file_", sim_data$a[jj], "_", sim_data$c[jj], "_", n, "_", sim_runs, "_", jj, ".csv"))
csv_write
}
closeAllConnections()
write.csv(x = o_table, file = "./Data/2024_10_21_overview_table_a_0_c_0_1.csv")
View(o_table)
# This code is to analyze some cases
library(MASS)
library(cSEM)
library(cSEM.DGP)
library(lavaan)
library(foreach)
library(doParallel)
library(diptest)
model_base <- "
# Structural model
Y ~ a*X1 + b*X2
X1 ~~ c*X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 0.6*x11 + 0.81*x12 + 0.778*x13
x11 ~~ 0.3*x12 + 0.4*x13
x12 ~~d*x13
X2 <~ 0.8*x21 + 0.9*x22 + 0.3*x23
x21 ~~ 0.5*x22 + 0.3*x23
x22 ~~e*x23
Y <~ 0.9*y1 + 0.6*y2 + 0.4*y3
y1 ~~ 0.2*y2 + 0.3*y3
y2 ~~ 0.1*y3
"
model_est <- "
# Structural model
Y ~ X1 + X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ x11 + x12 + x13
X2 <~ x21 + x22 + x23
Y <~ y1 + y2 + y3
"
set.seed(123)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
c = 0.1,
d = 0.4,
e = 0.5,
.return_type = "cor" )
n = 10000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
n = 100
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
n = 75
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
dip <- diptest::dip.test(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
dip$p.value
n = 10000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
infer_res <- infer(res_einzelanalyse, .alpha = 0.05, .quantity = "CI_percentile")
infer_res$Path_estimates$CI_percentile["95%L", "Y ~ X1"]
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
dip <- diptest::dip.test(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
dip$p.value
model_base <- "
# Structural model
Y ~ a*X1
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 0.6*x11 + 0.81*x12 + 0.778*x13
x11 ~~ 0.3*x12 + 0.4*x13
x12 ~~d*x13
"
# This code is to analyze some cases
library(MASS)
library(cSEM)
library(cSEM.DGP)
library(lavaan)
library(foreach)
library(doParallel)
library(diptest)
model_base <- "
# Structural model
Y ~ a*X1
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 0.6*x11 + 0.81*x12 + 0.778*x13
x11 ~~ 0.3*x12 + 0.4*x13
x12 ~~d*x13
"
model_est <- "
# Structural model
Y ~ X1
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ x11 + x12 + x13
"
set.seed(123)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
c = 0.1,
d = 0.4,
e = 0.5,
.return_type = "cor" )
model_base <- "
# Structural model
Y ~ a*X1 + bX2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 1*x11
X2 <~ 1*x21
Y <~ 1*y1
"
model_base <- "
# Structural model
Y ~ a*X1 + bX2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 1*x11
X2 <~ 1*x21
Y <~ 1*y1
"
model_est <- "
# Structural model
Y ~ X1 + X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ x11
X2 <~ x21
Y <~ y1
"
set.seed(123)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
c = 0.1,
d = 0.4,
e = 0.5,
.return_type = "cor" )
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
.return_type = "cor" )
model_base <- "
# Structural model
Y ~ a*X1 + b*X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 1*x11
X2 <~ 1*x21
Y <~ 1*y1
"
model_est <- "
# Structural model
Y ~ X1 + X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ x11
X2 <~ x21
Y <~ y1
"
set.seed(123)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
.return_type = "cor" )
n = 10000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
n = 75
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
View(data_sim_einzelanalyse)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0.1,
b = 0.2,
.return_type = "cor" )
n = 75
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
n = 1000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0.6,
b = 0.2,
.return_type = "cor" )
n = 1000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
dip <- diptest::dip.test(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
dip$p.value
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
dip <- diptest::dip.test(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
dip$p.value
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0.6,
b = 0.2,
.return_type = "cor"
)
n = 1000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
n = 75
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
infer_res <- infer(res_einzelanalyse, .alpha = 0.05, .quantity = "CI_percentile")
infer_res$Path_estimates$CI_percentile["95%L", "Y ~ X1"]
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
