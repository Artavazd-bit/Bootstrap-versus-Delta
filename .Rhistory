library(diptest)
model_base <- "
# Structural model
Y ~ a*X1 + b*X2
X1 ~~ c*X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 0.6*x11 + 0.81*x12 + 0.778*x13
x11 ~~ 0.3*x12 + 0.4*x13
x12 ~~d*x13
X2 <~ 0.8*x21 + 0.9*x22 + 0.3*x23
x21 ~~ 0.5*x22 + 0.3*x23
x22 ~~e*x23
Y <~ 0.9*y1 + 0.6*y2 + 0.4*y3
y1 ~~ 0.2*y2 + 0.3*y3
y2 ~~ 0.1*y3
"
model_est <- "
# Structural model
Y ~ X1 + X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ x11 + x12 + x13
X2 <~ x21 + x22 + x23
Y <~ y1 + y2 + y3
"
set.seed(123)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
c = 0.1,
d = 0.4,
e = 0.5,
.return_type = "cor" )
n = 10000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
n = 100
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
n = 75
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
dip <- diptest::dip.test(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
dip$p.value
n = 10000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
infer_res <- infer(res_einzelanalyse, .alpha = 0.05, .quantity = "CI_percentile")
infer_res$Path_estimates$CI_percentile["95%L", "Y ~ X1"]
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
dip <- diptest::dip.test(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
dip$p.value
model_base <- "
# Structural model
Y ~ a*X1
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 0.6*x11 + 0.81*x12 + 0.778*x13
x11 ~~ 0.3*x12 + 0.4*x13
x12 ~~d*x13
"
# This code is to analyze some cases
library(MASS)
library(cSEM)
library(cSEM.DGP)
library(lavaan)
library(foreach)
library(doParallel)
library(diptest)
model_base <- "
# Structural model
Y ~ a*X1
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 0.6*x11 + 0.81*x12 + 0.778*x13
x11 ~~ 0.3*x12 + 0.4*x13
x12 ~~d*x13
"
model_est <- "
# Structural model
Y ~ X1
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ x11 + x12 + x13
"
set.seed(123)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
c = 0.1,
d = 0.4,
e = 0.5,
.return_type = "cor" )
model_base <- "
# Structural model
Y ~ a*X1 + bX2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 1*x11
X2 <~ 1*x21
Y <~ 1*y1
"
model_base <- "
# Structural model
Y ~ a*X1 + bX2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 1*x11
X2 <~ 1*x21
Y <~ 1*y1
"
model_est <- "
# Structural model
Y ~ X1 + X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ x11
X2 <~ x21
Y <~ y1
"
set.seed(123)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
c = 0.1,
d = 0.4,
e = 0.5,
.return_type = "cor" )
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
.return_type = "cor" )
model_base <- "
# Structural model
Y ~ a*X1 + b*X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ 1*x11
X2 <~ 1*x21
Y <~ 1*y1
"
model_est <- "
# Structural model
Y ~ X1 + X2
# Measurement model
# Ladungen zwischen -1 und 1
# Werte zwischen 0.6 und 0.9
X1 <~ x11
X2 <~ x21
Y <~ y1
"
set.seed(123)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0,
b = 0.5,
.return_type = "cor" )
n = 10000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
n = 75
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
View(data_sim_einzelanalyse)
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0.1,
b = 0.2,
.return_type = "cor" )
n = 75
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
n = 1000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0.6,
b = 0.2,
.return_type = "cor" )
n = 1000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
dip <- diptest::dip.test(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
dip$p.value
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
dip <- diptest::dip.test(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1'])
dip$p.value
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
sim_data_einzel <- generateData(model_base,
.N= 5000,
.empirical = TRUE,
a = 0.6,
b = 0.2,
.return_type = "cor"
)
n = 1000
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
n = 75
set.seed(50 + 43 + 1 + 50)
data_sim_einzelanalyse <- MASS::mvrnorm(n = n,
mu= rep(0, nrow(sim_data_einzel$dgp[[1]])),
Sigma =  sim_data_einzel$dgp[[1]],
empirical = F
)
res_einzelanalyse <- csem(.data = data_sim_einzelanalyse,
.model = model_est,
.resample_method = 'bootstrap',
.R = 500,
.PLS_weight_scheme_inner = 'factorial',
.tolerance = 1e-06
)
infer_res <- infer(res_einzelanalyse, .alpha = 0.05, .quantity = "CI_percentile")
infer_res$Path_estimates$CI_percentile["95%L", "Y ~ X1"]
plot(density(res_einzelanalyse$Estimates$Estimates_resample$Estimates1$Path_estimates$Resampled[,'Y ~ X1']), main = "Empirical distribution of parameter estimates")
library(dplyr)
library(rpart)
library(rpart.plot)
library(ggplot2)
overview_table <- read.csv("./Data/2024_10_14_overview_table.csv")
overview_table_2 <- as.data.frame(overview_table)
overview_table_2_high_values <- overview_table_2[overview_table_2$a >= 0.3, ]
ggplot(overview_table_2_high_values, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_wrap(~ a, ncol = 1) + # optional, this separates the plots by 'a'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
filtered_data <- overview_table_2_high_values[overview_table_2_high_values$c %in% c(0.1, 0.2, 0.3, 0.4, 0.5), ]
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c) +  # Create a grid of plots for each combination of 'a' and 'c'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a' and 'c' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
overview_table <- read.csv("./Data/2024_10_14_overview_table.csv")
overview_table_2 <- as.data.frame(overview_table)
filtered_data <- overview_table_2[overview_table_2$c %in% c(0.1, 0.2, 0.3, 0.4, 0.5), ]
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c) +  # Create a grid of plots for each combination of 'a' and 'c'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a' and 'c' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0" = "black","0.1" = "orange","0.2" = "grey","0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c) +  # Create a grid of plots for each combination of 'a' and 'c'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a' and 'c' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
filtered_data <- overview_table[
overview_table$c %in% c(0.1, 0.2, 0.3, 0.4, 0.5) &
overview_table$n %in% c(50, 100, 200, 500),
]
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0" = "black","0.1" = "grey","0.2" = "orange", "0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c + n) +  # Create a grid for each combination of 'a', 'c', and 'n'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a', 'c', and 'n' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0" = "black","0.1" = "grey","0.2" = "orange", "0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c + n) +  # Create a grid for each combination of 'a', 'c', and 'n'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a', 'c', and 'n' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
View(overview_table)
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_line() +
scale_color_manual(values = c("0" = "black","0.1" = "grey","0.2" = "orange", "0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c + n) +  # Create a grid for each combination of 'a', 'c', and 'n'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a', 'c', and 'n' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0" = "black","0.1" = "grey","0.2" = "orange", "0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c + n) +  # Create a grid for each combination of 'a', 'c', and 'n'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a', 'c', and 'n' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
View(filtered_data)
filtered_data <- overview_table[
overview_table$c %in% c(0, 0.1, 0.2, 0.3, 0.4, 0.5) &
overview_table$n %in% c(50, 100, 200, 500),
]
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0" = "black","0.1" = "grey","0.2" = "orange", "0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c + n) +  # Create a grid for each combination of 'a', 'c', and 'n'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a', 'c', and 'n' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
filtered_data <- overview_table[
overview_table$c %in% c(0, 0.1, 0.2, 0.3, 0.4, 0.5) &
overview_table$n %in% c(50, 100, 200, 500),
]
# Plot the densities
ggplot(filtered_data, aes(x = path_estimate_y_x1.Y...X1, color = factor(a))) +
geom_density() +
scale_color_manual(values = c("0" = "black","0.1" = "grey","0.2" = "orange", "0.3" = "blue", "0.4" = "green", "0.5" = "red")) +
facet_grid(a ~ c + n) +  # Create a grid for each combination of 'a', 'c', and 'n'
labs(title = "Density of path_estimate_y_x1.Y...X1 for different 'a', 'c', and 'n' values",
x = "path_estimate_y_x1.Y...X1",
y = "Density",
color = "a values") +
theme_minimal()
